version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: client-api
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - NODE_ENV=development
      - MONGODB_URI=mongodb://root:example@mongodb:27017/client-api?authSource=admin
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - RABBITMQ_QUEUE=clients_queue
      - RABBITMQ_EXCHANGE=clients_exchange
      - RABBITMQ_ROUTING_KEY=clients.created
    volumes:
      - ./:/app
      - /app/node_modules
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_started
      redis:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:6
    container_name: client-api-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
      - MONGO_INITDB_DATABASE=client-api
    volumes:
      - mongodb-data:/data/db
    restart: unless-stopped
    command: ["--auth"]

  redis:
    image: redis:7-alpine
    container_name: client-api-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management
    container_name: client-api-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  mongodb-data:
  redis-data:
  rabbitmq-data:
